// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"quota_system/dal/model"
)

func newQuotaDatasetInfo(db *gorm.DB, opts ...gen.DOOption) quotaDatasetInfo {
	_quotaDatasetInfo := quotaDatasetInfo{}

	_quotaDatasetInfo.quotaDatasetInfoDo.UseDB(db, opts...)
	_quotaDatasetInfo.quotaDatasetInfoDo.UseModel(&model.QuotaDatasetInfo{})

	tableName := _quotaDatasetInfo.quotaDatasetInfoDo.TableName()
	_quotaDatasetInfo.ALL = field.NewAsterisk(tableName)
	_quotaDatasetInfo.ID = field.NewInt32(tableName, "id")
	_quotaDatasetInfo.DsName = field.NewString(tableName, "ds_name")
	_quotaDatasetInfo.DsDesc = field.NewString(tableName, "ds_desc")
	_quotaDatasetInfo.DsType = field.NewString(tableName, "ds_type")
	_quotaDatasetInfo.SourceID = field.NewInt32(tableName, "source_id")
	_quotaDatasetInfo.Meta = field.NewString(tableName, "meta")
	_quotaDatasetInfo.CreateBy = field.NewString(tableName, "create_by")
	_quotaDatasetInfo.CreateTime = field.NewTime(tableName, "create_time")
	_quotaDatasetInfo.UpdateTime = field.NewTime(tableName, "update_time")
	_quotaDatasetInfo.IsDeleted = field.NewInt32(tableName, "is_deleted")

	_quotaDatasetInfo.fillFieldMap()

	return _quotaDatasetInfo
}

// quotaDatasetInfo 数据集信息表

type quotaDatasetInfo struct {
	quotaDatasetInfoDo quotaDatasetInfoDo

	ALL        field.Asterisk
	ID         field.Int32
	DsName     field.String // 数据集名称
	DsDesc     field.String // 数据集描述
	DsType     field.String // 数据集类型
	SourceID   field.Int32  // 数据源id
	Meta       field.String // 数据集元数据
	CreateBy   field.String // 创建人
	CreateTime field.Time   // 创建时间
	UpdateTime field.Time   // 更新时间
	IsDeleted  field.Int32

	fieldMap map[string]field.Expr
}

func (q quotaDatasetInfo) Table(newTableName string) *quotaDatasetInfo {
	q.quotaDatasetInfoDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q quotaDatasetInfo) As(alias string) *quotaDatasetInfo {
	q.quotaDatasetInfoDo.DO = *(q.quotaDatasetInfoDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *quotaDatasetInfo) updateTableName(table string) *quotaDatasetInfo {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt32(table, "id")
	q.DsName = field.NewString(table, "ds_name")
	q.DsDesc = field.NewString(table, "ds_desc")
	q.DsType = field.NewString(table, "ds_type")
	q.SourceID = field.NewInt32(table, "source_id")
	q.Meta = field.NewString(table, "meta")
	q.CreateBy = field.NewString(table, "create_by")
	q.CreateTime = field.NewTime(table, "create_time")
	q.UpdateTime = field.NewTime(table, "update_time")
	q.IsDeleted = field.NewInt32(table, "is_deleted")

	q.fillFieldMap()

	return q
}

func (q *quotaDatasetInfo) WithContext(ctx context.Context) IQuotaDatasetInfoDo {
	return q.quotaDatasetInfoDo.WithContext(ctx)
}

func (q quotaDatasetInfo) TableName() string { return q.quotaDatasetInfoDo.TableName() }

func (q quotaDatasetInfo) Alias() string { return q.quotaDatasetInfoDo.Alias() }

func (q quotaDatasetInfo) Columns(cols ...field.Expr) gen.Columns {
	return q.quotaDatasetInfoDo.Columns(cols...)
}

func (q *quotaDatasetInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *quotaDatasetInfo) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 10)
	q.fieldMap["id"] = q.ID
	q.fieldMap["ds_name"] = q.DsName
	q.fieldMap["ds_desc"] = q.DsDesc
	q.fieldMap["ds_type"] = q.DsType
	q.fieldMap["source_id"] = q.SourceID
	q.fieldMap["meta"] = q.Meta
	q.fieldMap["create_by"] = q.CreateBy
	q.fieldMap["create_time"] = q.CreateTime
	q.fieldMap["update_time"] = q.UpdateTime
	q.fieldMap["is_deleted"] = q.IsDeleted
}

func (q quotaDatasetInfo) clone(db *gorm.DB) quotaDatasetInfo {
	q.quotaDatasetInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q quotaDatasetInfo) replaceDB(db *gorm.DB) quotaDatasetInfo {
	q.quotaDatasetInfoDo.ReplaceDB(db)
	return q
}

type quotaDatasetInfoDo struct{ gen.DO }

type IQuotaDatasetInfoDo interface {
	gen.SubQuery
	Debug() IQuotaDatasetInfoDo
	WithContext(ctx context.Context) IQuotaDatasetInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQuotaDatasetInfoDo
	WriteDB() IQuotaDatasetInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQuotaDatasetInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQuotaDatasetInfoDo
	Not(conds ...gen.Condition) IQuotaDatasetInfoDo
	Or(conds ...gen.Condition) IQuotaDatasetInfoDo
	Select(conds ...field.Expr) IQuotaDatasetInfoDo
	Where(conds ...gen.Condition) IQuotaDatasetInfoDo
	Order(conds ...field.Expr) IQuotaDatasetInfoDo
	Distinct(cols ...field.Expr) IQuotaDatasetInfoDo
	Omit(cols ...field.Expr) IQuotaDatasetInfoDo
	Join(table schema.Tabler, on ...field.Expr) IQuotaDatasetInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQuotaDatasetInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQuotaDatasetInfoDo
	Group(cols ...field.Expr) IQuotaDatasetInfoDo
	Having(conds ...gen.Condition) IQuotaDatasetInfoDo
	Limit(limit int) IQuotaDatasetInfoDo
	Offset(offset int) IQuotaDatasetInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQuotaDatasetInfoDo
	Unscoped() IQuotaDatasetInfoDo
	Create(values ...*model.QuotaDatasetInfo) error
	CreateInBatches(values []*model.QuotaDatasetInfo, batchSize int) error
	Save(values ...*model.QuotaDatasetInfo) error
	First() (*model.QuotaDatasetInfo, error)
	Take() (*model.QuotaDatasetInfo, error)
	Last() (*model.QuotaDatasetInfo, error)
	Find() ([]*model.QuotaDatasetInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QuotaDatasetInfo, err error)
	FindInBatches(result *[]*model.QuotaDatasetInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QuotaDatasetInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQuotaDatasetInfoDo
	Assign(attrs ...field.AssignExpr) IQuotaDatasetInfoDo
	Joins(fields ...field.RelationField) IQuotaDatasetInfoDo
	Preload(fields ...field.RelationField) IQuotaDatasetInfoDo
	FirstOrInit() (*model.QuotaDatasetInfo, error)
	FirstOrCreate() (*model.QuotaDatasetInfo, error)
	FindByPage(offset int, limit int) (result []*model.QuotaDatasetInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQuotaDatasetInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q quotaDatasetInfoDo) Debug() IQuotaDatasetInfoDo {
	return q.withDO(q.DO.Debug())
}

func (q quotaDatasetInfoDo) WithContext(ctx context.Context) IQuotaDatasetInfoDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q quotaDatasetInfoDo) ReadDB() IQuotaDatasetInfoDo {
	return q.Clauses(dbresolver.Read)
}

func (q quotaDatasetInfoDo) WriteDB() IQuotaDatasetInfoDo {
	return q.Clauses(dbresolver.Write)
}

func (q quotaDatasetInfoDo) Session(config *gorm.Session) IQuotaDatasetInfoDo {
	return q.withDO(q.DO.Session(config))
}

func (q quotaDatasetInfoDo) Clauses(conds ...clause.Expression) IQuotaDatasetInfoDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q quotaDatasetInfoDo) Returning(value interface{}, columns ...string) IQuotaDatasetInfoDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q quotaDatasetInfoDo) Not(conds ...gen.Condition) IQuotaDatasetInfoDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q quotaDatasetInfoDo) Or(conds ...gen.Condition) IQuotaDatasetInfoDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q quotaDatasetInfoDo) Select(conds ...field.Expr) IQuotaDatasetInfoDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q quotaDatasetInfoDo) Where(conds ...gen.Condition) IQuotaDatasetInfoDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q quotaDatasetInfoDo) Order(conds ...field.Expr) IQuotaDatasetInfoDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q quotaDatasetInfoDo) Distinct(cols ...field.Expr) IQuotaDatasetInfoDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q quotaDatasetInfoDo) Omit(cols ...field.Expr) IQuotaDatasetInfoDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q quotaDatasetInfoDo) Join(table schema.Tabler, on ...field.Expr) IQuotaDatasetInfoDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q quotaDatasetInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQuotaDatasetInfoDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q quotaDatasetInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IQuotaDatasetInfoDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q quotaDatasetInfoDo) Group(cols ...field.Expr) IQuotaDatasetInfoDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q quotaDatasetInfoDo) Having(conds ...gen.Condition) IQuotaDatasetInfoDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q quotaDatasetInfoDo) Limit(limit int) IQuotaDatasetInfoDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q quotaDatasetInfoDo) Offset(offset int) IQuotaDatasetInfoDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q quotaDatasetInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQuotaDatasetInfoDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q quotaDatasetInfoDo) Unscoped() IQuotaDatasetInfoDo {
	return q.withDO(q.DO.Unscoped())
}

func (q quotaDatasetInfoDo) Create(values ...*model.QuotaDatasetInfo) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q quotaDatasetInfoDo) CreateInBatches(values []*model.QuotaDatasetInfo, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q quotaDatasetInfoDo) Save(values ...*model.QuotaDatasetInfo) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q quotaDatasetInfoDo) First() (*model.QuotaDatasetInfo, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuotaDatasetInfo), nil
	}
}

func (q quotaDatasetInfoDo) Take() (*model.QuotaDatasetInfo, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuotaDatasetInfo), nil
	}
}

func (q quotaDatasetInfoDo) Last() (*model.QuotaDatasetInfo, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuotaDatasetInfo), nil
	}
}

func (q quotaDatasetInfoDo) Find() ([]*model.QuotaDatasetInfo, error) {
	result, err := q.DO.Find()
	return result.([]*model.QuotaDatasetInfo), err
}

func (q quotaDatasetInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QuotaDatasetInfo, err error) {
	buf := make([]*model.QuotaDatasetInfo, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q quotaDatasetInfoDo) FindInBatches(result *[]*model.QuotaDatasetInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q quotaDatasetInfoDo) Attrs(attrs ...field.AssignExpr) IQuotaDatasetInfoDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q quotaDatasetInfoDo) Assign(attrs ...field.AssignExpr) IQuotaDatasetInfoDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q quotaDatasetInfoDo) Joins(fields ...field.RelationField) IQuotaDatasetInfoDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q quotaDatasetInfoDo) Preload(fields ...field.RelationField) IQuotaDatasetInfoDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q quotaDatasetInfoDo) FirstOrInit() (*model.QuotaDatasetInfo, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuotaDatasetInfo), nil
	}
}

func (q quotaDatasetInfoDo) FirstOrCreate() (*model.QuotaDatasetInfo, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuotaDatasetInfo), nil
	}
}

func (q quotaDatasetInfoDo) FindByPage(offset int, limit int) (result []*model.QuotaDatasetInfo, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q quotaDatasetInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q quotaDatasetInfoDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q quotaDatasetInfoDo) Delete(models ...*model.QuotaDatasetInfo) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *quotaDatasetInfoDo) withDO(do gen.Dao) *quotaDatasetInfoDo {
	q.DO = *do.(*gen.DO)
	return q
}
