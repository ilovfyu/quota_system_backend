// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"quota_system/dal/model"
)

func newQuotaDatasourceInfo(db *gorm.DB, opts ...gen.DOOption) quotaDatasourceInfo {
	_quotaDatasourceInfo := quotaDatasourceInfo{}

	_quotaDatasourceInfo.quotaDatasourceInfoDo.UseDB(db, opts...)
	_quotaDatasourceInfo.quotaDatasourceInfoDo.UseModel(&model.QuotaDatasourceInfo{})

	tableName := _quotaDatasourceInfo.quotaDatasourceInfoDo.TableName()
	_quotaDatasourceInfo.ALL = field.NewAsterisk(tableName)
	_quotaDatasourceInfo.ID = field.NewInt32(tableName, "id")
	_quotaDatasourceInfo.Name = field.NewString(tableName, "name")
	_quotaDatasourceInfo.Type = field.NewString(tableName, "type")
	_quotaDatasourceInfo.Desc = field.NewString(tableName, "desc")
	_quotaDatasourceInfo.Connect = field.NewString(tableName, "connect")
	_quotaDatasourceInfo.CreateTime = field.NewTime(tableName, "create_time")
	_quotaDatasourceInfo.UpdateTime = field.NewTime(tableName, "update_time")
	_quotaDatasourceInfo.IsDeleted = field.NewInt32(tableName, "is_deleted")

	_quotaDatasourceInfo.fillFieldMap()

	return _quotaDatasourceInfo
}

type quotaDatasourceInfo struct {
	quotaDatasourceInfoDo quotaDatasourceInfoDo

	ALL        field.Asterisk
	ID         field.Int32
	Name       field.String // 数据源名称
	Type       field.String // 数据源类型
	Desc       field.String // 数据源描述
	Connect    field.String // 连接信息
	CreateTime field.Time   // 创建时间
	UpdateTime field.Time   // 更新时间
	IsDeleted  field.Int32

	fieldMap map[string]field.Expr
}

func (q quotaDatasourceInfo) Table(newTableName string) *quotaDatasourceInfo {
	q.quotaDatasourceInfoDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q quotaDatasourceInfo) As(alias string) *quotaDatasourceInfo {
	q.quotaDatasourceInfoDo.DO = *(q.quotaDatasourceInfoDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *quotaDatasourceInfo) updateTableName(table string) *quotaDatasourceInfo {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt32(table, "id")
	q.Name = field.NewString(table, "name")
	q.Type = field.NewString(table, "type")
	q.Desc = field.NewString(table, "desc")
	q.Connect = field.NewString(table, "connect")
	q.CreateTime = field.NewTime(table, "create_time")
	q.UpdateTime = field.NewTime(table, "update_time")
	q.IsDeleted = field.NewInt32(table, "is_deleted")

	q.fillFieldMap()

	return q
}

func (q *quotaDatasourceInfo) WithContext(ctx context.Context) IQuotaDatasourceInfoDo {
	return q.quotaDatasourceInfoDo.WithContext(ctx)
}

func (q quotaDatasourceInfo) TableName() string { return q.quotaDatasourceInfoDo.TableName() }

func (q quotaDatasourceInfo) Alias() string { return q.quotaDatasourceInfoDo.Alias() }

func (q quotaDatasourceInfo) Columns(cols ...field.Expr) gen.Columns {
	return q.quotaDatasourceInfoDo.Columns(cols...)
}

func (q *quotaDatasourceInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *quotaDatasourceInfo) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 8)
	q.fieldMap["id"] = q.ID
	q.fieldMap["name"] = q.Name
	q.fieldMap["type"] = q.Type
	q.fieldMap["desc"] = q.Desc
	q.fieldMap["connect"] = q.Connect
	q.fieldMap["create_time"] = q.CreateTime
	q.fieldMap["update_time"] = q.UpdateTime
	q.fieldMap["is_deleted"] = q.IsDeleted
}

func (q quotaDatasourceInfo) clone(db *gorm.DB) quotaDatasourceInfo {
	q.quotaDatasourceInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q quotaDatasourceInfo) replaceDB(db *gorm.DB) quotaDatasourceInfo {
	q.quotaDatasourceInfoDo.ReplaceDB(db)
	return q
}

type quotaDatasourceInfoDo struct{ gen.DO }

type IQuotaDatasourceInfoDo interface {
	gen.SubQuery
	Debug() IQuotaDatasourceInfoDo
	WithContext(ctx context.Context) IQuotaDatasourceInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQuotaDatasourceInfoDo
	WriteDB() IQuotaDatasourceInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQuotaDatasourceInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQuotaDatasourceInfoDo
	Not(conds ...gen.Condition) IQuotaDatasourceInfoDo
	Or(conds ...gen.Condition) IQuotaDatasourceInfoDo
	Select(conds ...field.Expr) IQuotaDatasourceInfoDo
	Where(conds ...gen.Condition) IQuotaDatasourceInfoDo
	Order(conds ...field.Expr) IQuotaDatasourceInfoDo
	Distinct(cols ...field.Expr) IQuotaDatasourceInfoDo
	Omit(cols ...field.Expr) IQuotaDatasourceInfoDo
	Join(table schema.Tabler, on ...field.Expr) IQuotaDatasourceInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQuotaDatasourceInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQuotaDatasourceInfoDo
	Group(cols ...field.Expr) IQuotaDatasourceInfoDo
	Having(conds ...gen.Condition) IQuotaDatasourceInfoDo
	Limit(limit int) IQuotaDatasourceInfoDo
	Offset(offset int) IQuotaDatasourceInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQuotaDatasourceInfoDo
	Unscoped() IQuotaDatasourceInfoDo
	Create(values ...*model.QuotaDatasourceInfo) error
	CreateInBatches(values []*model.QuotaDatasourceInfo, batchSize int) error
	Save(values ...*model.QuotaDatasourceInfo) error
	First() (*model.QuotaDatasourceInfo, error)
	Take() (*model.QuotaDatasourceInfo, error)
	Last() (*model.QuotaDatasourceInfo, error)
	Find() ([]*model.QuotaDatasourceInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QuotaDatasourceInfo, err error)
	FindInBatches(result *[]*model.QuotaDatasourceInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QuotaDatasourceInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQuotaDatasourceInfoDo
	Assign(attrs ...field.AssignExpr) IQuotaDatasourceInfoDo
	Joins(fields ...field.RelationField) IQuotaDatasourceInfoDo
	Preload(fields ...field.RelationField) IQuotaDatasourceInfoDo
	FirstOrInit() (*model.QuotaDatasourceInfo, error)
	FirstOrCreate() (*model.QuotaDatasourceInfo, error)
	FindByPage(offset int, limit int) (result []*model.QuotaDatasourceInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQuotaDatasourceInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q quotaDatasourceInfoDo) Debug() IQuotaDatasourceInfoDo {
	return q.withDO(q.DO.Debug())
}

func (q quotaDatasourceInfoDo) WithContext(ctx context.Context) IQuotaDatasourceInfoDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q quotaDatasourceInfoDo) ReadDB() IQuotaDatasourceInfoDo {
	return q.Clauses(dbresolver.Read)
}

func (q quotaDatasourceInfoDo) WriteDB() IQuotaDatasourceInfoDo {
	return q.Clauses(dbresolver.Write)
}

func (q quotaDatasourceInfoDo) Session(config *gorm.Session) IQuotaDatasourceInfoDo {
	return q.withDO(q.DO.Session(config))
}

func (q quotaDatasourceInfoDo) Clauses(conds ...clause.Expression) IQuotaDatasourceInfoDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q quotaDatasourceInfoDo) Returning(value interface{}, columns ...string) IQuotaDatasourceInfoDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q quotaDatasourceInfoDo) Not(conds ...gen.Condition) IQuotaDatasourceInfoDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q quotaDatasourceInfoDo) Or(conds ...gen.Condition) IQuotaDatasourceInfoDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q quotaDatasourceInfoDo) Select(conds ...field.Expr) IQuotaDatasourceInfoDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q quotaDatasourceInfoDo) Where(conds ...gen.Condition) IQuotaDatasourceInfoDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q quotaDatasourceInfoDo) Order(conds ...field.Expr) IQuotaDatasourceInfoDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q quotaDatasourceInfoDo) Distinct(cols ...field.Expr) IQuotaDatasourceInfoDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q quotaDatasourceInfoDo) Omit(cols ...field.Expr) IQuotaDatasourceInfoDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q quotaDatasourceInfoDo) Join(table schema.Tabler, on ...field.Expr) IQuotaDatasourceInfoDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q quotaDatasourceInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQuotaDatasourceInfoDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q quotaDatasourceInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IQuotaDatasourceInfoDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q quotaDatasourceInfoDo) Group(cols ...field.Expr) IQuotaDatasourceInfoDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q quotaDatasourceInfoDo) Having(conds ...gen.Condition) IQuotaDatasourceInfoDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q quotaDatasourceInfoDo) Limit(limit int) IQuotaDatasourceInfoDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q quotaDatasourceInfoDo) Offset(offset int) IQuotaDatasourceInfoDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q quotaDatasourceInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQuotaDatasourceInfoDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q quotaDatasourceInfoDo) Unscoped() IQuotaDatasourceInfoDo {
	return q.withDO(q.DO.Unscoped())
}

func (q quotaDatasourceInfoDo) Create(values ...*model.QuotaDatasourceInfo) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q quotaDatasourceInfoDo) CreateInBatches(values []*model.QuotaDatasourceInfo, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q quotaDatasourceInfoDo) Save(values ...*model.QuotaDatasourceInfo) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q quotaDatasourceInfoDo) First() (*model.QuotaDatasourceInfo, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuotaDatasourceInfo), nil
	}
}

func (q quotaDatasourceInfoDo) Take() (*model.QuotaDatasourceInfo, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuotaDatasourceInfo), nil
	}
}

func (q quotaDatasourceInfoDo) Last() (*model.QuotaDatasourceInfo, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuotaDatasourceInfo), nil
	}
}

func (q quotaDatasourceInfoDo) Find() ([]*model.QuotaDatasourceInfo, error) {
	result, err := q.DO.Find()
	return result.([]*model.QuotaDatasourceInfo), err
}

func (q quotaDatasourceInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QuotaDatasourceInfo, err error) {
	buf := make([]*model.QuotaDatasourceInfo, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q quotaDatasourceInfoDo) FindInBatches(result *[]*model.QuotaDatasourceInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q quotaDatasourceInfoDo) Attrs(attrs ...field.AssignExpr) IQuotaDatasourceInfoDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q quotaDatasourceInfoDo) Assign(attrs ...field.AssignExpr) IQuotaDatasourceInfoDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q quotaDatasourceInfoDo) Joins(fields ...field.RelationField) IQuotaDatasourceInfoDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q quotaDatasourceInfoDo) Preload(fields ...field.RelationField) IQuotaDatasourceInfoDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q quotaDatasourceInfoDo) FirstOrInit() (*model.QuotaDatasourceInfo, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuotaDatasourceInfo), nil
	}
}

func (q quotaDatasourceInfoDo) FirstOrCreate() (*model.QuotaDatasourceInfo, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuotaDatasourceInfo), nil
	}
}

func (q quotaDatasourceInfoDo) FindByPage(offset int, limit int) (result []*model.QuotaDatasourceInfo, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q quotaDatasourceInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q quotaDatasourceInfoDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q quotaDatasourceInfoDo) Delete(models ...*model.QuotaDatasourceInfo) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *quotaDatasourceInfoDo) withDO(do gen.Dao) *quotaDatasourceInfoDo {
	q.DO = *do.(*gen.DO)
	return q
}
