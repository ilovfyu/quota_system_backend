// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"quota_system/dal/model"
)

func newQuotaBucInfo(db *gorm.DB, opts ...gen.DOOption) quotaBucInfo {
	_quotaBucInfo := quotaBucInfo{}

	_quotaBucInfo.quotaBucInfoDo.UseDB(db, opts...)
	_quotaBucInfo.quotaBucInfoDo.UseModel(&model.QuotaBucInfo{})

	tableName := _quotaBucInfo.quotaBucInfoDo.TableName()
	_quotaBucInfo.ALL = field.NewAsterisk(tableName)
	_quotaBucInfo.ID = field.NewInt32(tableName, "id")
	_quotaBucInfo.GUID = field.NewString(tableName, "guid")
	_quotaBucInfo.BucName = field.NewString(tableName, "buc_name")
	_quotaBucInfo.BucDesc = field.NewString(tableName, "buc_desc")
	_quotaBucInfo.BucStatus = field.NewInt32(tableName, "buc_status")
	_quotaBucInfo.BucTags = field.NewString(tableName, "buc_tags")
	_quotaBucInfo.DsID = field.NewInt32(tableName, "ds_id")
	_quotaBucInfo.CreateTime = field.NewTime(tableName, "create_time")
	_quotaBucInfo.UpdateTime = field.NewTime(tableName, "update_time")
	_quotaBucInfo.IsDeleted = field.NewInt32(tableName, "is_deleted")

	_quotaBucInfo.fillFieldMap()

	return _quotaBucInfo
}

// quotaBucInfo 业务域目录管理表

type quotaBucInfo struct {
	quotaBucInfoDo quotaBucInfoDo

	ALL        field.Asterisk
	ID         field.Int32
	GUID       field.String // 业务流程id
	BucName    field.String // 业务流程名称
	BucDesc    field.String // 描述
	BucStatus  field.Int32  // 业务流程状态
	BucTags    field.String // 业务流程标签
	DsID       field.Int32  // 数据集id
	CreateTime field.Time   // 创建时间
	UpdateTime field.Time   // 更新时间
	IsDeleted  field.Int32  // 是否删除

	fieldMap map[string]field.Expr
}

func (q quotaBucInfo) Table(newTableName string) *quotaBucInfo {
	q.quotaBucInfoDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q quotaBucInfo) As(alias string) *quotaBucInfo {
	q.quotaBucInfoDo.DO = *(q.quotaBucInfoDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *quotaBucInfo) updateTableName(table string) *quotaBucInfo {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt32(table, "id")
	q.GUID = field.NewString(table, "guid")
	q.BucName = field.NewString(table, "buc_name")
	q.BucDesc = field.NewString(table, "buc_desc")
	q.BucStatus = field.NewInt32(table, "buc_status")
	q.BucTags = field.NewString(table, "buc_tags")
	q.DsID = field.NewInt32(table, "ds_id")
	q.CreateTime = field.NewTime(table, "create_time")
	q.UpdateTime = field.NewTime(table, "update_time")
	q.IsDeleted = field.NewInt32(table, "is_deleted")

	q.fillFieldMap()

	return q
}

func (q *quotaBucInfo) WithContext(ctx context.Context) IQuotaBucInfoDo {
	return q.quotaBucInfoDo.WithContext(ctx)
}

func (q quotaBucInfo) TableName() string { return q.quotaBucInfoDo.TableName() }

func (q quotaBucInfo) Alias() string { return q.quotaBucInfoDo.Alias() }

func (q quotaBucInfo) Columns(cols ...field.Expr) gen.Columns {
	return q.quotaBucInfoDo.Columns(cols...)
}

func (q *quotaBucInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *quotaBucInfo) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 10)
	q.fieldMap["id"] = q.ID
	q.fieldMap["guid"] = q.GUID
	q.fieldMap["buc_name"] = q.BucName
	q.fieldMap["buc_desc"] = q.BucDesc
	q.fieldMap["buc_status"] = q.BucStatus
	q.fieldMap["buc_tags"] = q.BucTags
	q.fieldMap["ds_id"] = q.DsID
	q.fieldMap["create_time"] = q.CreateTime
	q.fieldMap["update_time"] = q.UpdateTime
	q.fieldMap["is_deleted"] = q.IsDeleted
}

func (q quotaBucInfo) clone(db *gorm.DB) quotaBucInfo {
	q.quotaBucInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q quotaBucInfo) replaceDB(db *gorm.DB) quotaBucInfo {
	q.quotaBucInfoDo.ReplaceDB(db)
	return q
}

type quotaBucInfoDo struct{ gen.DO }

type IQuotaBucInfoDo interface {
	gen.SubQuery
	Debug() IQuotaBucInfoDo
	WithContext(ctx context.Context) IQuotaBucInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQuotaBucInfoDo
	WriteDB() IQuotaBucInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQuotaBucInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQuotaBucInfoDo
	Not(conds ...gen.Condition) IQuotaBucInfoDo
	Or(conds ...gen.Condition) IQuotaBucInfoDo
	Select(conds ...field.Expr) IQuotaBucInfoDo
	Where(conds ...gen.Condition) IQuotaBucInfoDo
	Order(conds ...field.Expr) IQuotaBucInfoDo
	Distinct(cols ...field.Expr) IQuotaBucInfoDo
	Omit(cols ...field.Expr) IQuotaBucInfoDo
	Join(table schema.Tabler, on ...field.Expr) IQuotaBucInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQuotaBucInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQuotaBucInfoDo
	Group(cols ...field.Expr) IQuotaBucInfoDo
	Having(conds ...gen.Condition) IQuotaBucInfoDo
	Limit(limit int) IQuotaBucInfoDo
	Offset(offset int) IQuotaBucInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQuotaBucInfoDo
	Unscoped() IQuotaBucInfoDo
	Create(values ...*model.QuotaBucInfo) error
	CreateInBatches(values []*model.QuotaBucInfo, batchSize int) error
	Save(values ...*model.QuotaBucInfo) error
	First() (*model.QuotaBucInfo, error)
	Take() (*model.QuotaBucInfo, error)
	Last() (*model.QuotaBucInfo, error)
	Find() ([]*model.QuotaBucInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QuotaBucInfo, err error)
	FindInBatches(result *[]*model.QuotaBucInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QuotaBucInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQuotaBucInfoDo
	Assign(attrs ...field.AssignExpr) IQuotaBucInfoDo
	Joins(fields ...field.RelationField) IQuotaBucInfoDo
	Preload(fields ...field.RelationField) IQuotaBucInfoDo
	FirstOrInit() (*model.QuotaBucInfo, error)
	FirstOrCreate() (*model.QuotaBucInfo, error)
	FindByPage(offset int, limit int) (result []*model.QuotaBucInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQuotaBucInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q quotaBucInfoDo) Debug() IQuotaBucInfoDo {
	return q.withDO(q.DO.Debug())
}

func (q quotaBucInfoDo) WithContext(ctx context.Context) IQuotaBucInfoDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q quotaBucInfoDo) ReadDB() IQuotaBucInfoDo {
	return q.Clauses(dbresolver.Read)
}

func (q quotaBucInfoDo) WriteDB() IQuotaBucInfoDo {
	return q.Clauses(dbresolver.Write)
}

func (q quotaBucInfoDo) Session(config *gorm.Session) IQuotaBucInfoDo {
	return q.withDO(q.DO.Session(config))
}

func (q quotaBucInfoDo) Clauses(conds ...clause.Expression) IQuotaBucInfoDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q quotaBucInfoDo) Returning(value interface{}, columns ...string) IQuotaBucInfoDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q quotaBucInfoDo) Not(conds ...gen.Condition) IQuotaBucInfoDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q quotaBucInfoDo) Or(conds ...gen.Condition) IQuotaBucInfoDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q quotaBucInfoDo) Select(conds ...field.Expr) IQuotaBucInfoDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q quotaBucInfoDo) Where(conds ...gen.Condition) IQuotaBucInfoDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q quotaBucInfoDo) Order(conds ...field.Expr) IQuotaBucInfoDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q quotaBucInfoDo) Distinct(cols ...field.Expr) IQuotaBucInfoDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q quotaBucInfoDo) Omit(cols ...field.Expr) IQuotaBucInfoDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q quotaBucInfoDo) Join(table schema.Tabler, on ...field.Expr) IQuotaBucInfoDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q quotaBucInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQuotaBucInfoDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q quotaBucInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IQuotaBucInfoDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q quotaBucInfoDo) Group(cols ...field.Expr) IQuotaBucInfoDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q quotaBucInfoDo) Having(conds ...gen.Condition) IQuotaBucInfoDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q quotaBucInfoDo) Limit(limit int) IQuotaBucInfoDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q quotaBucInfoDo) Offset(offset int) IQuotaBucInfoDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q quotaBucInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQuotaBucInfoDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q quotaBucInfoDo) Unscoped() IQuotaBucInfoDo {
	return q.withDO(q.DO.Unscoped())
}

func (q quotaBucInfoDo) Create(values ...*model.QuotaBucInfo) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q quotaBucInfoDo) CreateInBatches(values []*model.QuotaBucInfo, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q quotaBucInfoDo) Save(values ...*model.QuotaBucInfo) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q quotaBucInfoDo) First() (*model.QuotaBucInfo, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuotaBucInfo), nil
	}
}

func (q quotaBucInfoDo) Take() (*model.QuotaBucInfo, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuotaBucInfo), nil
	}
}

func (q quotaBucInfoDo) Last() (*model.QuotaBucInfo, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuotaBucInfo), nil
	}
}

func (q quotaBucInfoDo) Find() ([]*model.QuotaBucInfo, error) {
	result, err := q.DO.Find()
	return result.([]*model.QuotaBucInfo), err
}

func (q quotaBucInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QuotaBucInfo, err error) {
	buf := make([]*model.QuotaBucInfo, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q quotaBucInfoDo) FindInBatches(result *[]*model.QuotaBucInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q quotaBucInfoDo) Attrs(attrs ...field.AssignExpr) IQuotaBucInfoDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q quotaBucInfoDo) Assign(attrs ...field.AssignExpr) IQuotaBucInfoDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q quotaBucInfoDo) Joins(fields ...field.RelationField) IQuotaBucInfoDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q quotaBucInfoDo) Preload(fields ...field.RelationField) IQuotaBucInfoDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q quotaBucInfoDo) FirstOrInit() (*model.QuotaBucInfo, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuotaBucInfo), nil
	}
}

func (q quotaBucInfoDo) FirstOrCreate() (*model.QuotaBucInfo, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QuotaBucInfo), nil
	}
}

func (q quotaBucInfoDo) FindByPage(offset int, limit int) (result []*model.QuotaBucInfo, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q quotaBucInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q quotaBucInfoDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q quotaBucInfoDo) Delete(models ...*model.QuotaBucInfo) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *quotaBucInfoDo) withDO(do gen.Dao) *quotaBucInfoDo {
	q.DO = *do.(*gen.DO)
	return q
}
